import React, { useState, useEffect } from 'react'
import useAppStore from '../../../stores/useAppStore'

// Componente de gráfico de barras simple
const BarChart = ({ data, title, height = 300 }) => {
  const maxValue = Math.max(...data.map(d => d.value))
  
  return (
    <div className="bg-white rounded-xl shadow-medium p-6">
      <h3 className="text-lg font-bold text-gray-800 mb-4">
        <i className="fas fa-chart-bar text-blue-600 mr-2"></i>
        {title}
      </h3>
      <div className="relative" style={{ height: `${height}px` }}>
        <div className="flex items-end justify-between h-full">
          {data.map((item, index) => {
            const percentage = (item.value / maxValue) * 100
            return (
              <div key={index} className="flex-1 mx-1 flex flex-col items-center justify-end">
                <div className="text-sm font-bold text-gray-700 mb-1">
                  S/ {item.value.toLocaleString()}
                </div>
                <div 
                  className="w-full bg-gradient-to-t from-blue-600 to-blue-400 rounded-t-lg transition-all duration-500"
                  style={{ height: `${percentage}%`, minHeight: '20px' }}
                ></div>
                <div className="text-xs text-gray-600 mt-2 text-center">
                  {item.label}
                </div>
              </div>
            )
          })}
        </div>
      </div>
    </div>
  )
}

// Componente de gráfico de líneas simple
const LineChart = ({ data, title, height = 300 }) => {
  return (
    <div className="bg-white rounded-xl shadow-medium p-6">
      <h3 className="text-lg font-bold text-gray-800 mb-4">
        <i className="fas fa-chart-line text-green-600 mr-2"></i>
        {title}
      </h3>
      <div className="relative" style={{ height: `${height}px` }}>
        <svg width="100%" height="100%" viewBox="0 0 500 300" preserveAspectRatio="none">
          <polyline
            fill="none"
            stroke="#10b981"
            strokeWidth="3"
            points={data.map((d, i) => 
              `${(i * 500) / (data.length - 1)},${300 - (d.value / Math.max(...data.map(d => d.value))) * 280}`
            ).join(' ')}
          />
          {data.map((d, i) => (
            <circle
              key={i}
              cx={(i * 500) / (data.length - 1)}
              cy={300 - (d.value / Math.max(...data.map(d => d.value))) * 280}
              r="5"
              fill="#10b981"
            />
          ))}
        </svg>
        <div className="flex justify-between mt-2">
          {data.map((item, index) => (
            <div key={index} className="text-xs text-gray-600">
              {item.label}
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

// Componente de gráfico de pie simple
const PieChart = ({ data, title }) => {
  const total = data.reduce((sum, item) => sum + item.value, 0)
  const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899']
  
  return (
    <div className="bg-white rounded-xl shadow-medium p-6">
      <h3 className="text-lg font-bold text-gray-800 mb-4">
        <i className="fas fa-chart-pie text-purple-600 mr-2"></i>
        {title}
      </h3>
      <div className="flex items-center justify-between">
        <div className="relative w-40 h-40">
          <svg viewBox="0 0 42 42" className="w-full h-full transform -rotate-90">
            {data.reduce((acc, item, index) => {
              const percentage = (item.value / total) * 100
              const strokeDasharray = `${percentage} ${100 - percentage}`
              const strokeDashoffset = -acc
              acc += percentage
              
              return [
                ...acc,
                <circle
                  key={index}
                  cx="21"
                  cy="21"
                  r="15.915"
                  fill="transparent"
                  stroke={colors[index % colors.length]}
                  strokeWidth="3"
                  strokeDasharray={strokeDasharray}
                  strokeDashoffset={strokeDashoffset}
                />
              ]
            }, []).flat()}
          </svg>
        </div>
        <div className="flex-1 ml-6">
          {data.map((item, index) => (
            <div key={index} className="flex items-center justify-between mb-2">
              <div className="flex items-center">
                <div 
                  className="w-3 h-3 rounded-full mr-2"
                  style={{ backgroundColor: colors[index % colors.length] }}
                ></div>
                <span className="text-sm text-gray-700">{item.label}</span>
              </div>
              <span className="text-sm font-bold text-gray-900">
                {((item.value / total) * 100).toFixed(1)}%
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

const FinancialReport = () => {
  const { transactions, revenueSummary, allUsers } = useAppStore()
  const [metrics, setMetrics] = useState({
    totalRevenue: 0,
    monthlyRevenue: 0,
    weeklyRevenue: 0,
    dailyRevenue: 0,
    averageTransaction: 0,
    growthRate: 0
  })

  // Calcular métricas
  useEffect(() => {
    if (transactions) {
      const now = new Date()
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1)
      const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay()))
      const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate())

      const totalRevenue = transactions.reduce((sum, t) => sum + (t.amount || 0), 0)
      const monthlyTransactions = transactions.filter(t => new Date(t.date) >= startOfMonth)
      const weeklyTransactions = transactions.filter(t => new Date(t.date) >= startOfWeek)
      const dailyTransactions = transactions.filter(t => new Date(t.date) >= startOfDay)

      const monthlyRevenue = monthlyTransactions.reduce((sum, t) => sum + (t.amount || 0), 0)
      const weeklyRevenue = weeklyTransactions.reduce((sum, t) => sum + (t.amount || 0), 0)
      const dailyRevenue = dailyTransactions.reduce((sum, t) => sum + (t.amount || 0), 0)

      setMetrics({
        totalRevenue,
        monthlyRevenue,
        weeklyRevenue,
        dailyRevenue,
        averageTransaction: transactions.length > 0 ? totalRevenue / transactions.length : 0,
        growthRate: 15.3 // Simulado
      })
    }
  }, [transactions])

  // Datos para gráficos
  const monthlyData = [
    { label: 'Ene', value: 45000 },
    { label: 'Feb', value: 52000 },
    { label: 'Mar', value: 48000 },
    { label: 'Abr', value: 61000 },
    { label: 'May', value: 58000 },
    { label: 'Jun', value: 67000 }
  ]

  const weeklyData = [
    { label: 'Lun', value: 8500 },
    { label: 'Mar', value: 9200 },
    { label: 'Mie', value: 7800 },
    { label: 'Jue', value: 10500 },
    { label: 'Vie', value: 11200 },
    { label: 'Sab', value: 9800 },
    { label: 'Dom', value: 6500 }
  ]

  const categoryData = [
    { label: 'Emergencias', value: 45000 },
    { label: 'Consultas', value: 32000 },
    { label: 'Traslados', value: 28000 },
    { label: 'Otros', value: 15000 }
  ]

  const planData = [
    { label: 'Plan Help', value: 35000 },
    { label: 'Plan Básico', value: 28000 },
    { label: 'Plan VIP', value: 42000 },
    { label: 'Corporativo', value: 15000 }
  ]

  return (
    <div className="space-y-6">
      {/* Header con métricas principales */}
      <div className="bg-gradient-to-r from-green-600 to-blue-600 rounded-xl p-6 text-white">
        <h2 className="text-2xl font-bold mb-4">Dashboard Financiero</h2>
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
          <div>
            <p className="text-green-100 text-sm">Ingresos Totales</p>
            <p className="text-3xl font-bold">S/ {metrics.totalRevenue.toLocaleString()}</p>
            <p className="text-green-200 text-xs mt-1">Histórico acumulado</p>
          </div>
          <div>
            <p className="text-green-100 text-sm">Ingresos del Mes</p>
            <p className="text-3xl font-bold">S/ {metrics.monthlyRevenue.toLocaleString()}</p>
            <p className="text-green-200 text-xs mt-1">
              <i className="fas fa-arrow-up mr-1"></i>+{metrics.growthRate}% vs mes anterior
            </p>
          </div>
          <div>
            <p className="text-green-100 text-sm">Promedio por Transacción</p>
            <p className="text-3xl font-bold">S/ {Math.round(metrics.averageTransaction).toLocaleString()}</p>
            <p className="text-green-200 text-xs mt-1">Ticket promedio</p>
          </div>
          <div>
            <p className="text-green-100 text-sm">Transacciones Totales</p>
            <p className="text-3xl font-bold">{transactions?.length || 0}</p>
            <p className="text-green-200 text-xs mt-1">Operaciones completadas</p>
          </div>
        </div>
      </div>

      {/* Gráficos principales */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <BarChart 
          data={monthlyData} 
          title="Ingresos Mensuales (Últimos 6 meses)" 
        />
        <LineChart 
          data={weeklyData} 
          title="Tendencia Semanal" 
        />
      </div>

      {/* Gráficos secundarios */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <PieChart 
          data={categoryData} 
          title="Distribución por Categoría" 
        />
        <PieChart 
          data={planData} 
          title="Ingresos por Plan" 
        />
      </div>

      {/* Tabla de transacciones recientes */}
      <div className="bg-white rounded-xl shadow-medium p-6">
        <h3 className="text-lg font-bold text-gray-800 mb-4">
          <i className="fas fa-list text-indigo-600 mr-2"></i>
          Transacciones Recientes
        </h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b bg-gray-50">
                <th className="text-left py-3 px-4 font-medium text-gray-700">ID</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Fecha</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Cliente</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Tipo</th>
                <th className="text-right py-3 px-4 font-medium text-gray-700">Monto</th>
                <th className="text-center py-3 px-4 font-medium text-gray-700">Estado</th>
              </tr>
            </thead>
            <tbody>
              {transactions?.slice(0, 10).map((transaction, index) => (
                <tr key={transaction.id || index} className="border-b hover:bg-gray-50">
                  <td className="py-3 px-4 text-sm text-gray-600">
                    #{transaction.id || `TRX-${index + 1}`}
                  </td>
                  <td className="py-3 px-4 text-sm text-gray-600">
                    {new Date(transaction.date || Date.now()).toLocaleDateString('es-PE')}
                  </td>
                  <td className="py-3 px-4 text-sm text-gray-800 font-medium">
                    {transaction.userName || 'Cliente'}
                  </td>
                  <td className="py-3 px-4">
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                      {transaction.type || 'SERVICIO'}
                    </span>
                  </td>
                  <td className="py-3 px-4 text-sm text-gray-800 font-bold text-right">
                    S/ {(transaction.amount || 0).toLocaleString()}
                  </td>
                  <td className="py-3 px-4 text-center">
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      transaction.status === 'COMPLETED' 
                        ? 'bg-green-100 text-green-800' 
                        : transaction.status === 'PENDING'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {transaction.status || 'COMPLETADO'}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Estadísticas adicionales */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 font-medium">Tasa de Conversión</p>
              <p className="text-2xl font-bold text-gray-900">68.5%</p>
            </div>
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
              <i className="fas fa-percentage text-purple-600 text-xl"></i>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 font-medium">Usuarios Activos</p>
              <p className="text-2xl font-bold text-gray-900">
                {Object.values(allUsers || {}).reduce((sum, users) => sum + (users?.length || 0), 0)}
              </p>
            </div>
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <i className="fas fa-users text-blue-600 text-xl"></i>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 font-medium">Retención</p>
              <p className="text-2xl font-bold text-gray-900">92.3%</p>
            </div>
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <i className="fas fa-user-check text-green-600 text-xl"></i>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 font-medium">Churn Rate</p>
              <p className="text-2xl font-bold text-gray-900">3.2%</p>
            </div>
            <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
              <i className="fas fa-user-minus text-red-600 text-xl"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default FinancialReport